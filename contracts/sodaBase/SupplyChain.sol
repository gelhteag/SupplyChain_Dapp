pragma solidity ^0.4.24;

import "../sodaCore/Ownable.sol";
import "../sodaAccessControl/FactoryRole.sol";
import "../sodaAccessControl/DistributorRole.sol";
import "../sodaAccessControl/RetailerRole.sol";
import "../sodaAccessControl/ConsumerRole.sol";
// Define a contract 'Supplychain'
contract SupplyChain is Ownable, FactoryRole, DistributorRole, RetailerRole, ConsumerRole {

  // Define 'owner'
  //address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Designed,  // 0
    Processed,  // 1
    Packed,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
    }

  State constant defaultState = State.Designed;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Factory, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFactoryID; // Metamask-Ethereum address of the Factory
    string  originFactoryName; // Factory Name
    string  originFactoryInformation;  // Factory Information
    string  originFactoryLatitude; // Factory Latitude
    string  originFactoryLongitude;  // Factory Longitude
    string  image; // hash of the product image to search on ipfs
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Designed(uint upc);
  event Processed(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner());
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Designed
  modifier designed(uint _upc) {
    require(items[_upc].itemState == State.Designed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier processed(uint _upc) {
    require(items[_upc].itemState == State.Processed);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased);
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    //owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  
  /**
     * @dev  allows to 'kill' if required.
     */
  function kill() public {
    if (msg.sender == owner()) {
      selfdestruct(owner());
    }
  }

  
  /**
     * @dev  allows a the factory to mark an item 'Designed'.
     */
  function designItem(uint _upc, address _originFactoryID, string _originFactoryName, string _originFactoryInformation, string  _originFactoryLatitude, string  _originFactoryLongitude, string  _productNotes, string _image) public 
  {
    // Add the new item as part of Designed
    Item  memory newItem = Item({
    sku: sku, 
    upc: _upc,
    ownerID: _originFactoryID,  
    originFactoryID: _originFactoryID,
    originFactoryName: _originFactoryName, 
    originFactoryInformation: _originFactoryInformation,
    originFactoryLatitude: _originFactoryLatitude, 
    originFactoryLongitude: _originFactoryLongitude,
    image: _image,  
    productID: sku+_upc,  
    productNotes: _productNotes, 
    productPrice: 0, 
    itemState: defaultState,
    distributorID: 0,  
    retailerID: 0, 
    consumerID: 0 
    });
    items[_upc] = newItem;
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Designed(_upc);
  }

  /**
     * @dev  allows a factory to mark an item 'Processed'.
     * @param _upc code of the product Processed.
     */
  function processItem(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  designed(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].originFactoryID)
  onlyFactory
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Processed;
    // Emit the appropriate event
    emit Processed(_upc);
  }

 
  /**
     * @dev  allows a factory to mark an item 'Packed'.
     * @param _upc code of the product Packed.
     */
  function packItem(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  processed(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].originFactoryID)
  onlyFactory
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Packed;
    // Emit the appropriate event
    emit Packed(_upc);
  }

  
  /**
     * @dev  allows a factory to mark an item 'ForSale'.
     * @param _upc code of the product on sale _price price of the product on sale.
     */
  function sellItem(uint _upc, uint _price) public 
  // Call modifier to check if upc has passed previous supply chain stage
  packed(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].originFactoryID)
  onlyFactory
  
  {
    // Update the appropriate fields
    items[_upc].productPrice = _price;
    items[_upc].itemState = State.ForSale;
    // Emit the appropriate event
    emit ForSale(_upc);
  }

  
  /**
     * @dev  allows the disributor to mark an item 'Sold'
     * @param _upc code of the product sold.
     */
  function buyItem(uint _upc) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    forSale(_upc)
    // Call modifer to check if buyer has paid enough
     paidEnough(items[_upc].productPrice)
    // Call modifer to send any excess ether back to buyer
    checkValue(upc)
    onlyDistributor
    {
    
    // Update the appropriate fields - ownerID, distributorID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].distributorID = msg.sender;
    items[_upc].itemState = State.Sold;
    
    // Transfer money to factory
    items[_upc].originFactoryID.transfer(items[_upc].productPrice);
    // emit the appropriate event
     emit Sold(_upc);
  }

 
  /**
     * @dev  allows the distributor to mark an item 'Shipped'.
     * @param _upc code of the product Shipped.
     */
  function shipItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    sold(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(items[_upc].distributorID)
    onlyDistributor
    {
    // Update the appropriate fields
    items[_upc].itemState = State.Shipped;
    // Emit the appropriate event
     emit Shipped(_upc);
    
  }

  
  /**
     * @dev  allows the retailer to mark an item 'Received'.
     * @param _upc code of the product Received.
     */
  function receiveItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    shipped(_upc)
    onlyRetailer
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].retailerID = msg.sender;
    items[_upc].itemState = State.Received;
    // Emit the appropriate event
    emit Received(_upc);
    
  }


  /**
     * @dev  allows the consumer to mark an item 'Purchased'.
     * @param _upc code of the product tracked.
     */
  function purchaseItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    received(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyConsumer
    {
   
    items[_upc].ownerID = msg.sender;
    items[_upc].consumerID = msg.sender;
    items[_upc].itemState = State.Purchased;
    
    emit Purchased(_upc);
  }

  
  /**
     * @dev  fetches the data
     * @param _upc code of the product tracked.
     */
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originFactoryID,
  string  originFactoryName,
  string  originFactoryInformation,
  string  originFactoryLatitude,
  string  originFactoryLongitude,
  string  image
  ) 
  {
  
  itemSKU = items[_upc].sku;
  itemUPC = items[_upc].upc;
  ownerID = items[_upc].ownerID;
  originFactoryID = items[_upc].originFactoryID;
  originFactoryName = items[_upc].originFactoryName;
  originFactoryInformation = items[_upc].originFactoryInformation;
  originFactoryLatitude = items[_upc].originFactoryLatitude;
  originFactoryLongitude = items[_upc].originFactoryLongitude;
  image = items[_upc].image;
    
  return 
  (
  itemSKU,
  itemUPC,
  ownerID,
  originFactoryID,
  originFactoryName,
  originFactoryInformation,
  originFactoryLatitude,
  originFactoryLongitude,
  image
  );
  }

  
  /**
     * @dev  fetches the data
     * @param _upc code of the product tracked.
     */
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  productNotes,
  uint    productPrice,
  uint    itemState,
  address distributorID,
  address retailerID,
  address consumerID
  ) 
  {
    
  itemSKU = items[_upc].sku;
  itemUPC = items[_upc].upc;
  productID = items[_upc].productID;
  productNotes = items[_upc].productNotes;
  productPrice = items[_upc].productPrice;
  itemState = uint256 (items[_upc].itemState);
  distributorID = items[_upc].distributorID;
  retailerID = items[_upc].retailerID;
  consumerID = items[_upc].consumerID;
    
  return 
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  distributorID,
  retailerID,
  consumerID
  );
  }
}
